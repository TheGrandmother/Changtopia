module main
-- Lets try to write the basics for a shell like thing!

def load_module(arg)
  match arg
    [name] ->
      match bif:request(0, $load_module, name)
        $module_not_found ->
          bif:send(0, $print_string, list:flatten(['Could not find module: ', name, '\n']))
          return $fail
        end
        $already_loaded ->
          bif:send(0, $print_string, list:flatten([name, ' has already been loaded \n']))
          return $ok
        end
        whatever ->
          bif:send(0, $print_string, list:flatten(['Loaded module: ', name, '\n']))
          return $ok
        end
      end
    end
    [] ->
      bif:send(0, $print_string, 'No module name provided\n')
      return $fail
    end
    whatever ->
      bif:send(0, $print_string, 'Load only takes the name of the module as an argument\n')
      return $fail
    end
  end
  return $ok
end

def run_module(arg)
  match arg
    [name] ->
      --return bif:run(name, '_entry')
      return spawn_module(name)
    end
    [] ->
      bif:send(0, $print_string, 'No module name provided\n')
      return $fail
    end
    whatever ->
      bif:send(0, $print_string, 'Run only takes the name of the module as an argument\n')
      return $fail
    end
  end
  return $ok
end

def help()
  bif:send(0, $print_string, 'Welcome to the ridicously pointless "operating system"\n')
  bif:send(0, $print_string, 'This is what you can do, which ain\'t much\n')
  return _help(commands())
end

def _help(commands)
  match commands
    [] ->
      return $ok
    end
    [entry, <rest>] ->
      [name, arg_count, _, help_text] = entry
      bif:send(0, $print_string, list:flatten(['\t', name, ': ', help_text, '\n']))
      return _help(rest)
    end
  end
  return $ok
end

def spawn_module(name)
  pid = bif:spawn('main', '_spawn_module', name)
  bif:link(pid)
  response = bif:request(pid, $run)
  match response
    [$error, error_atom, msg] ->
      bif:send(0, $print_string, list:flatten(['Error running: ', name, ':\n  ', msg, '\n']))
      return $error
    end
    $ok ->
      return $ok
    end
    [the_fuck, something, msg] ->
      return $ok
    end
    whatever ->
      bif:send(0, $print_string, list:flatten([name, ' Sent us some strange shit...\n', msg, '\n']))
      return $ok
    end
  end
  bif:unlink(pid)
  return $ok
end

def _spawn_module(name)
  return bif:listen('main', '_spawn_listener', name)
end

def _spawn_listener(name, sender, payload)
  match payload
    $run ->
      return bif:run(name, '_entry')
    end
    whatever ->
      return $unknown_message
    end
  end
  return $ok
end

def process_command(input)
  match input
    ' '   ->
      bif:send(0, $print_string, 'No command provided\n')
      return $ok
    end
    [command, <arguments>] ->
      match command
        'load' ->
          load_module(arguments)
          return $ok
        end
        'run' ->
          run_module(arguments)
          return $ok
        end
        'help' ->
          help()
          return $ok
        end
        'quit' ->
          bif:send(0, $print_string, 'Thanks for nothing... cya l8r\n')
          return $quit
        end
        whatever ->
          bif:send(0, $print_string, list:flatten(['What is even "', command, '"? I\'ve never heard of such stupidity before.\n']))
        end
      end
      return $seriously
    end
  end
  return $ok
end

def quit(_)
  bif:send(0, $print_string, 'Thanks for nothing... cya l8r\n')
  bif:send(0, $shut_down)
  return $ok
end


def run_command(input)
  [name, <arguments>] = input
  match find_command(name)
    $not_found ->
      bif:send(0, $print_string, list:flatten(['What is even "', name, '"?\n']))
      return $ok
    end
    [_, arg_count, thing, __] ->
      [module, function] = thing
      return bif:run(module, function, arguments)
    end
  end
  return $ok
end

def commands()
  -- Commands ar an array on the form:
  -- name, noArgs, [module, function], help_text
  bob = [
    ['quit', 0, ['main', 'quit'], 'Quits the VM'],
    ['run', 1, ['main', 'run_module'], 'Runs the specified module'],
    ['load', 1, ['main', 'load_module'], 'Loads the specified module'],
    ['help', 0, ['main', 'help'], 'Prints this.. duh']
  ]
  return bob
end
def find_command(name)
  bob = commands()
  return _find_command(name, bob)
end

def _find_command(name, commands)
  match commands
    [] ->
      return $not_found
    end
    [command, <rest>] ->
      [command_name, <_>] = command
      if bif:array_compare(name, command_name)
        return command
      end
      return _find_command(name, rest)
    end
  end
  return $ok
end

def prompt()
  input_string = io:get_line()
  io:print_string('\n')
  match run_command(list:split_by(input_string, " "))
    $quit ->
      return $quit
    end
    whatever ->
      return prompt()
    end
  end
  return $ok
end

def _entry()
  bif:send(0, $print_string, '\n')
  bif:send(0, $print_string, 'Starting An even cooler Shell.\nLoading Modules:\n')
  match bif:request(0, $load_module, 'io')
    $module_not_found ->
      bif:send(0, $print_string, 'Could not load io module\n')
    end
    whatever ->
      bif:send(0, $print_string, '  Io module loaded\n')
    end
  end
  match bif:request(0, $load_module, 'list')
    $module_not_found ->
      bif:send(0, $print_string, 'Could not load list module\n')
    end
    whatever ->
      bif:send(0, $print_string, '  List module loaded\n')
    end
  end
  bif:request(0, $get_input_stream)
  prompt()
  return $ok
end
