// Generated automatically by nearley, version 2.19.3
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

  const ast = require('./ast/ast.js')
  const lexer = require('./tokenizer.js')
  //const ast = {}
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "main$ebnf$1$subexpression$1", "symbols": ["function_def"]},
    {"name": "main$ebnf$1", "symbols": ["main$ebnf$1$subexpression$1"]},
    {"name": "main$ebnf$1$subexpression$2", "symbols": ["function_def"]},
    {"name": "main$ebnf$1", "symbols": ["main$ebnf$1", "main$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "main", "symbols": ["module", "main$ebnf$1"], "postprocess": ast.flattenAndStrip},
    {"name": "module", "symbols": [(lexer.has("module") ? {type: "module"} : module), "_", "identifier", (lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": ast.makeModule},
    {"name": "function_def", "symbols": [{"literal":"def"}, "_", "identifier", "_", "name_tuple", (lexer.has("nl") ? {type: "nl"} : nl), "block", (lexer.has("nl") ? {type: "nl"} : nl), {"literal":"end"}, (lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": ast.makeFunction},
    {"name": "closure$subexpression$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "closure$subexpression$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "closure$subexpression$2", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "closure$subexpression$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "closure", "symbols": [{"literal":"def"}, "_", "name_tuple", "closure$subexpression$1", "block", "closure$subexpression$2", {"literal":"end"}], "postprocess": ast.makeClosure},
    {"name": "block", "symbols": ["compound"], "postprocess": ast.makeBlock},
    {"name": "block$subexpression$1", "symbols": [{"literal":";"}]},
    {"name": "block$subexpression$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "block$subexpression$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "block", "symbols": ["compound", "_", "block$subexpression$1", "block"], "postprocess": ast.makeBlock},
    {"name": "block", "symbols": ["match", (lexer.has("nl") ? {type: "nl"} : nl), "block"], "postprocess": ast.makeBlock},
    {"name": "block", "symbols": ["match"]},
    {"name": "match", "symbols": [{"literal":"match"}, "__", "expr", "_", (lexer.has("nl") ? {type: "nl"} : nl), "_", "match_clauses"], "postprocess": ast.makeMatcher},
    {"name": "match_clauses", "symbols": ["match_clause", "_", "match_clauses"]},
    {"name": "match_clauses", "symbols": [{"literal":"end"}]},
    {"name": "match_clause$subexpression$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "match_clause$subexpression$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "match_clause$subexpression$2", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "match_clause$subexpression$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "match_clause", "symbols": ["thing", "__", {"literal":"->"}, "match_clause$subexpression$1", "block", "match_clause$subexpression$2", {"literal":"end"}, (lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": ast.makeClause},
    {"name": "compound", "symbols": ["assignment"]},
    {"name": "compound", "symbols": ["function_call"]},
    {"name": "compound", "symbols": [{"literal":"return"}, "_", "expr"], "postprocess": ast.makeReturn},
    {"name": "compound", "symbols": ["if"], "postprocess": ast.makeIfStatement},
    {"name": "if$subexpression$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "if$subexpression$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "if$subexpression$2", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "if$subexpression$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "if", "symbols": [{"literal":"if"}, "__", "math", "if$subexpression$1", "block", "if$subexpression$2", {"literal":"end"}]},
    {"name": "assignment", "symbols": ["unpack", "__", {"literal":"="}, "_", "expr"], "postprocess": ast.makeAssignment},
    {"name": "assignment", "symbols": ["identifier", "__", {"literal":"="}, "_", "expr"], "postprocess": ast.makeAssignment},
    {"name": "expr", "symbols": ["math"], "postprocess": ast.makeExpr},
    {"name": "expr", "symbols": ["closure"]},
    {"name": "math", "symbols": ["logic"], "postprocess": ast.makeMath},
    {"name": "logic", "symbols": ["logic", "_", (lexer.has("logic") ? {type: "logic"} : logic), "_", "comparison"], "postprocess": ast.makeMath},
    {"name": "logic", "symbols": ["comparison"], "postprocess": ast.makeMath},
    {"name": "comparison", "symbols": ["comparison", "_", (lexer.has("comparison") ? {type: "comparison"} : comparison), "_", "arithmetic"], "postprocess": ast.makeMath},
    {"name": "comparison", "symbols": ["arithmetic"], "postprocess": ast.makeMath},
    {"name": "arithmetic", "symbols": ["arithmetic", "_", (lexer.has("arithmetic") ? {type: "arithmetic"} : arithmetic), "_", "multiplicative"], "postprocess": ast.makeMath},
    {"name": "arithmetic", "symbols": ["multiplicative"], "postprocess": ast.makeMath},
    {"name": "multiplicative", "symbols": ["multiplicative", "_", (lexer.has("multiplicative") ? {type: "multiplicative"} : multiplicative), "_", "thing"], "postprocess": ast.makeMath},
    {"name": "multiplicative", "symbols": ["thing"], "postprocess": ast.makeMath},
    {"name": "parenthesized", "symbols": [{"literal":"("}, "_", "expr", "_", {"literal":")"}], "postprocess": ast.strip},
    {"name": "thing", "symbols": ["function_call"], "postprocess": ast.strip},
    {"name": "thing", "symbols": ["parenthesized"], "postprocess": ast.strip},
    {"name": "thing", "symbols": ["array_litteral"]},
    {"name": "thing", "symbols": [(lexer.has("string") ? {type: "string"} : string)], "postprocess": ast.makeString},
    {"name": "thing", "symbols": ["identifier"]},
    {"name": "thing", "symbols": ["constant"], "postprocess": ast.makeConstant},
    {"name": "constant", "symbols": [(lexer.has("number") ? {type: "number"} : number)], "postprocess": ast.makeNumber},
    {"name": "constant", "symbols": [(lexer.has("char") ? {type: "char"} : char)], "postprocess": ast.makeChar},
    {"name": "constant", "symbols": [(lexer.has("atom") ? {type: "atom"} : atom)], "postprocess": ast.makeAtom},
    {"name": "constant", "symbols": [(lexer.has("bool") ? {type: "bool"} : bool)], "postprocess": ast.makeBool},
    {"name": "function_call", "symbols": ["explicit_call"]},
    {"name": "function_call", "symbols": ["refference_call"]},
    {"name": "explicit_call$ebnf$1$subexpression$1", "symbols": ["identifier", {"literal":":"}]},
    {"name": "explicit_call$ebnf$1", "symbols": ["explicit_call$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "explicit_call$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "explicit_call", "symbols": ["explicit_call$ebnf$1", "identifier", "expr_tuple"], "postprocess": ast.makeFunctionCall},
    {"name": "refference_call", "symbols": [{"literal":"@"}, "identifier", "expr_tuple"], "postprocess": ast.makeRefferenceCall},
    {"name": "name_tuple", "symbols": [{"literal":"("}, "_", "ident_list", "_", {"literal":")"}], "postprocess": ast.makeTuple},
    {"name": "name_tuple", "symbols": [{"literal":"("}, "_", {"literal":")"}], "postprocess": ast.makeTuple},
    {"name": "ident_list", "symbols": ["_ident_list"], "postprocess": ast.makeIdentList},
    {"name": "ident_list$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "ident_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ident_list", "symbols": ["_ident_list", "_", {"literal":","}, "_", "ident_list$ebnf$1"], "postprocess": ast.makeIdentList},
    {"name": "_ident_list", "symbols": ["identifier"], "postprocess": ast.flattenAndStrip},
    {"name": "_ident_list$ebnf$1$subexpression$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "_ident_list$ebnf$1$subexpression$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "_ident_list$ebnf$1", "symbols": ["_ident_list$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "_ident_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_ident_list", "symbols": ["_ident_list", "_", {"literal":","}, "_ident_list$ebnf$1", "identifier"], "postprocess": ast.flattenAndStrip},
    {"name": "expr_tuple$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "expr_tuple$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "expr_tuple$ebnf$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "expr_tuple$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "expr_tuple", "symbols": [{"literal":"("}, "expr_tuple$ebnf$1", "_", "expr_list", "_", "expr_tuple$ebnf$2", {"literal":")"}], "postprocess": ast.makeTuple},
    {"name": "expr_tuple", "symbols": [{"literal":"("}, "_", {"literal":")"}], "postprocess": ast.makeTuple},
    {"name": "expr_list", "symbols": ["_expr_list"], "postprocess": ast.makeExprList},
    {"name": "expr_list", "symbols": ["_expr_list", "_", {"literal":","}], "postprocess": ast.makeExprList},
    {"name": "_expr_list", "symbols": ["expr"]},
    {"name": "_expr_list$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "_expr_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_expr_list", "symbols": ["_expr_list", "_", {"literal":","}, "_expr_list$ebnf$1", "_", "expr"], "postprocess": ast.flattenAndStrip},
    {"name": "array_litteral$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "array_litteral$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "array_litteral$ebnf$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "array_litteral$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "array_litteral", "symbols": [{"literal":"["}, "array_litteral$ebnf$1", "_", "repack_list", "_", "array_litteral$ebnf$2", {"literal":"]"}], "postprocess": ast.makeArrayLitteral},
    {"name": "array_litteral", "symbols": [{"literal":"["}, "_", {"literal":"]"}], "postprocess": ast.makeArrayLitteral},
    {"name": "repack_list", "symbols": ["_repack_list"]},
    {"name": "repack_list$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "repack_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "repack_list", "symbols": ["_repack_list", "_", {"literal":","}, "repack_list$ebnf$1"]},
    {"name": "_repack_list", "symbols": ["expr"]},
    {"name": "_repack_list", "symbols": ["array_blob"]},
    {"name": "_repack_list$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "_repack_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_repack_list", "symbols": ["_repack_list", "_", {"literal":","}, "_repack_list$ebnf$1", "_", "expr"]},
    {"name": "_repack_list$ebnf$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "_repack_list$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_repack_list", "symbols": ["_repack_list", "_", {"literal":","}, "_repack_list$ebnf$2", "_", "array_blob"]},
    {"name": "array_blob", "symbols": [(lexer.has("blob") ? {type: "blob"} : blob)], "postprocess": ast.makeBlob},
    {"name": "unpack$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "unpack$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "unpack$ebnf$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "unpack$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "unpack", "symbols": [{"literal":"["}, "unpack$ebnf$1", "_", "_unpack", "_", "unpack$ebnf$2", {"literal":"]"}], "postprocess": ast.makeUnpack},
    {"name": "_unpack", "symbols": ["ident_list"], "postprocess": ast.strip},
    {"name": "_unpack$ebnf$1$subexpression$1$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "_unpack$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_unpack$ebnf$1$subexpression$1", "symbols": ["_ident_list", "_", {"literal":","}, "_unpack$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "_unpack$ebnf$1", "symbols": ["_unpack$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "_unpack$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_unpack$ebnf$2$subexpression$1$ebnf$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)], "postprocess": id},
    {"name": "_unpack$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_unpack$ebnf$2$subexpression$1", "symbols": [{"literal":","}, "_unpack$ebnf$2$subexpression$1$ebnf$1", "_ident_list"], "postprocess": ast.strip},
    {"name": "_unpack$ebnf$2", "symbols": ["_unpack$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "_unpack$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_unpack", "symbols": ["_unpack$ebnf$1", "_", "array_blob", "_", "_unpack$ebnf$2"]},
    {"name": "identifier", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)], "postprocess": ast.makeIdentifier},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", (lexer.has("ws") ? {type: "ws"} : ws)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": ast.skip},
    {"name": "__$ebnf$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", (lexer.has("ws") ? {type: "ws"} : ws)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": ast.skip}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
