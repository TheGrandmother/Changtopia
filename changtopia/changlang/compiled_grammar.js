// Generated automatically by nearley, version 2.19.0
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

  const ast = require('./ast/ast.js')
  //const ast = {}
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "main$ebnf$1$subexpression$1", "symbols": ["function_def"]},
    {"name": "main$ebnf$1", "symbols": ["main$ebnf$1$subexpression$1"]},
    {"name": "main$ebnf$1$subexpression$2", "symbols": ["function_def"]},
    {"name": "main$ebnf$1", "symbols": ["main$ebnf$1", "main$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "main", "symbols": ["module", "main$ebnf$1"], "postprocess": ast.flattenAndStrip},
    {"name": "module$string$1", "symbols": [{"literal":"m"}, {"literal":"o"}, {"literal":"d"}, {"literal":"u"}, {"literal":"l"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "module$ebnf$1", "symbols": []},
    {"name": "module$ebnf$1", "symbols": ["module$ebnf$1", {"literal":"\n"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "module", "symbols": ["module$string$1", "_", "identifier", "module$ebnf$1"], "postprocess": ast.makeModule},
    {"name": "function_def$string$1", "symbols": [{"literal":"d"}, {"literal":"e"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "function_def$string$2", "symbols": [{"literal":"e"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "function_def$ebnf$1", "symbols": []},
    {"name": "function_def$ebnf$1", "symbols": ["function_def$ebnf$1", {"literal":"\n"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "function_def", "symbols": ["function_def$string$1", "_", "identifier", "_", "name_tuple", "_", {"literal":"\n"}, "_", "block", "_", {"literal":"\n"}, "_", "function_def$string$2", "function_def$ebnf$1"], "postprocess": ast.makeFunction},
    {"name": "block", "symbols": ["compound"], "postprocess": ast.makeBlock},
    {"name": "block$subexpression$1", "symbols": [{"literal":";"}]},
    {"name": "block$subexpression$1", "symbols": [{"literal":"\n"}]},
    {"name": "block", "symbols": ["compound", "_", "block$subexpression$1", "_", "block"], "postprocess": ast.makeBlock},
    {"name": "block$subexpression$2", "symbols": [{"literal":";"}]},
    {"name": "block$subexpression$2", "symbols": [{"literal":"\n"}]},
    {"name": "block", "symbols": ["block$subexpression$2", "_", "block"], "postprocess": ast.makeBlock},
    {"name": "block$subexpression$3", "symbols": [{"literal":"\n"}]},
    {"name": "block", "symbols": ["match", "_", "block$subexpression$3", "_", "block"], "postprocess": ast.makeBlock},
    {"name": "block", "symbols": ["match"]},
    {"name": "match$string$1", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"t"}, {"literal":"c"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "match", "symbols": ["match$string$1", "__", "expr", "_", {"literal":"\n"}, "_", "match_clauses"], "postprocess": ast.makeMatcher},
    {"name": "match_clauses", "symbols": ["match_clause", "_", "match_clauses"]},
    {"name": "match_clauses$string$1", "symbols": [{"literal":"e"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "match_clauses", "symbols": ["match_clauses$string$1"]},
    {"name": "match_clause$string$1", "symbols": [{"literal":"-"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "match_clause$string$2", "symbols": [{"literal":"e"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "match_clause", "symbols": ["pattern", "__", "match_clause$string$1", "_", {"literal":"\n"}, "_", "block", {"literal":"\n"}, "_", "match_clause$string$2", "_", {"literal":"\n"}], "postprocess": ast.makeClause},
    {"name": "pattern", "symbols": ["constant"], "postprocess": ast.makeConstant},
    {"name": "pattern", "symbols": ["string"]},
    {"name": "pattern", "symbols": ["identifier"]},
    {"name": "pattern", "symbols": ["array_litteral"]},
    {"name": "compound", "symbols": ["assignment"]},
    {"name": "compound", "symbols": ["function_call"]},
    {"name": "compound$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "compound", "symbols": ["compound$string$1", "_", "expr"], "postprocess": ast.makeReturn},
    {"name": "compound", "symbols": ["if"], "postprocess": ast.makeIfStatement},
    {"name": "if$string$1", "symbols": [{"literal":"i"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "if$string$2", "symbols": [{"literal":"e"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "if", "symbols": ["if$string$1", "__", "math", "_", {"literal":"\n"}, "_", "block", "_", {"literal":"\n"}, "_", "if$string$2"]},
    {"name": "assignment", "symbols": ["unpack", "__", {"literal":"="}, "_", "expr"], "postprocess": ast.makeAssignment},
    {"name": "assignment", "symbols": ["array_indexed", "__", {"literal":"="}, "_", "expr"], "postprocess": ast.makeAssignment},
    {"name": "assignment", "symbols": ["identifier", "__", {"literal":"="}, "_", "expr"], "postprocess": ast.makeAssignment},
    {"name": "expr", "symbols": ["math"], "postprocess": ast.makeExpr},
    {"name": "math", "symbols": ["logic"], "postprocess": ast.makeMath},
    {"name": "logic$subexpression$1$string$1", "symbols": [{"literal":"&"}, {"literal":"&"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "logic$subexpression$1", "symbols": ["logic$subexpression$1$string$1"]},
    {"name": "logic$subexpression$1$string$2", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "logic$subexpression$1", "symbols": ["logic$subexpression$1$string$2"]},
    {"name": "logic", "symbols": ["logic", "_", "logic$subexpression$1", "_", "comparison"], "postprocess": ast.makeMath},
    {"name": "logic", "symbols": ["comparison"], "postprocess": ast.makeMath},
    {"name": "comparison$subexpression$1$string$1", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comparison$subexpression$1", "symbols": ["comparison$subexpression$1$string$1"]},
    {"name": "comparison$subexpression$1$string$2", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comparison$subexpression$1", "symbols": ["comparison$subexpression$1$string$2"]},
    {"name": "comparison$subexpression$1", "symbols": [{"literal":">"}]},
    {"name": "comparison$subexpression$1", "symbols": [{"literal":"<"}]},
    {"name": "comparison", "symbols": ["comparison", "_", "comparison$subexpression$1", "_", "arithmetic"], "postprocess": ast.makeMath},
    {"name": "comparison", "symbols": ["arithmetic"], "postprocess": ast.makeMath},
    {"name": "arithmetic$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "arithmetic$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "arithmetic", "symbols": ["arithmetic", "_", "arithmetic$subexpression$1", "_", "multiplicative"], "postprocess": ast.makeMath},
    {"name": "arithmetic", "symbols": ["multiplicative"], "postprocess": ast.makeMath},
    {"name": "multiplicative$subexpression$1", "symbols": [{"literal":"*"}]},
    {"name": "multiplicative$subexpression$1", "symbols": [{"literal":"/"}]},
    {"name": "multiplicative", "symbols": ["multiplicative", "_", "multiplicative$subexpression$1", "_", "thing"], "postprocess": ast.makeMath},
    {"name": "multiplicative", "symbols": ["thing"], "postprocess": ast.makeMath},
    {"name": "parenthesized", "symbols": [{"literal":"("}, "_", "expr", "_", {"literal":")"}], "postprocess": ast.strip},
    {"name": "thing", "symbols": ["function_call"], "postprocess": ast.strip},
    {"name": "thing", "symbols": ["parenthesized"], "postprocess": ast.strip},
    {"name": "thing", "symbols": ["array_litteral"]},
    {"name": "thing", "symbols": ["array_indexed"]},
    {"name": "thing", "symbols": ["string"]},
    {"name": "thing", "symbols": ["identifier"]},
    {"name": "thing", "symbols": ["constant"], "postprocess": ast.makeConstant},
    {"name": "constant", "symbols": ["number"]},
    {"name": "constant", "symbols": ["char"], "postprocess": ast.makeChar},
    {"name": "constant", "symbols": ["atom"]},
    {"name": "atom", "symbols": [{"literal":"$"}, "identifier"], "postprocess": ast.makeAtom},
    {"name": "function_call$ebnf$1$subexpression$1", "symbols": ["identifier", {"literal":":"}]},
    {"name": "function_call$ebnf$1", "symbols": ["function_call$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "function_call$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "function_call", "symbols": ["function_call$ebnf$1", "identifier", "expr_tuple"], "postprocess": ast.makeFunctionCall},
    {"name": "array_indexed", "symbols": ["identifier", {"literal":"#"}, "parenthesized"], "postprocess": ast.makeArrayIndexing},
    {"name": "name_tuple", "symbols": [{"literal":"("}, "_", "ident_list", "_", {"literal":")"}], "postprocess": ast.makeTuple},
    {"name": "name_tuple", "symbols": [{"literal":"("}, "_", {"literal":")"}], "postprocess": ast.makeTuple},
    {"name": "ident_list", "symbols": ["_ident_list"], "postprocess": ast.makeIdentList},
    {"name": "ident_list$ebnf$1", "symbols": [{"literal":"\n"}], "postprocess": id},
    {"name": "ident_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ident_list", "symbols": ["_ident_list", "_", {"literal":","}, "ident_list$ebnf$1"], "postprocess": ast.makeIdentList},
    {"name": "_ident_list", "symbols": ["identifier"], "postprocess": ast.flattenAndStrip},
    {"name": "_ident_list$ebnf$1", "symbols": [{"literal":"\n"}], "postprocess": id},
    {"name": "_ident_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_ident_list", "symbols": ["_ident_list", "_", {"literal":","}, "_ident_list$ebnf$1", "_", "identifier"], "postprocess": ast.flattenAndStrip},
    {"name": "expr_tuple", "symbols": [{"literal":"("}, "_", "expr_list", "_", {"literal":")"}], "postprocess": ast.makeTuple},
    {"name": "expr_tuple", "symbols": [{"literal":"("}, "_", {"literal":")"}], "postprocess": ast.makeTuple},
    {"name": "array_litteral$ebnf$1$subexpression$1", "symbols": ["_", {"literal":"\n"}]},
    {"name": "array_litteral$ebnf$1", "symbols": ["array_litteral$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "array_litteral$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "array_litteral$ebnf$2$subexpression$1", "symbols": [{"literal":"\n"}, "_"]},
    {"name": "array_litteral$ebnf$2", "symbols": ["array_litteral$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "array_litteral$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "array_litteral", "symbols": [{"literal":"["}, "array_litteral$ebnf$1", "_", "repack_list", "_", "array_litteral$ebnf$2", {"literal":"]"}], "postprocess": ast.makeArrayLitteral},
    {"name": "array_litteral", "symbols": [{"literal":"["}, "_", {"literal":"]"}], "postprocess": ast.makeArrayLitteral},
    {"name": "repack_list", "symbols": ["_repack_list"]},
    {"name": "repack_list$ebnf$1", "symbols": [{"literal":"\n"}], "postprocess": id},
    {"name": "repack_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "repack_list", "symbols": ["_repack_list", "_", {"literal":","}, "repack_list$ebnf$1"]},
    {"name": "_repack_list", "symbols": ["expr"]},
    {"name": "_repack_list", "symbols": ["array_blob"]},
    {"name": "_repack_list$ebnf$1", "symbols": [{"literal":"\n"}], "postprocess": id},
    {"name": "_repack_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_repack_list", "symbols": ["_repack_list", "_", {"literal":","}, "_repack_list$ebnf$1", "_", "expr"]},
    {"name": "_repack_list$ebnf$2", "symbols": [{"literal":"\n"}], "postprocess": id},
    {"name": "_repack_list$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_repack_list", "symbols": ["_repack_list", "_", {"literal":","}, "_repack_list$ebnf$2", "_", "array_blob"]},
    {"name": "_repack", "symbols": ["expr_list"]},
    {"name": "_repack$ebnf$1", "symbols": [{"literal":"\n"}], "postprocess": id},
    {"name": "_repack$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_repack", "symbols": ["expr_list", "_", {"literal":","}, "_repack$ebnf$1", "_", "array_blob"]},
    {"name": "array_blob", "symbols": [{"literal":"<"}, "_", "identifier", "_", {"literal":">"}], "postprocess": ast.makeBlob},
    {"name": "unpack$ebnf$1$subexpression$1", "symbols": ["_", {"literal":"\n"}]},
    {"name": "unpack$ebnf$1", "symbols": ["unpack$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "unpack$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "unpack$ebnf$2", "symbols": [{"literal":"\n"}], "postprocess": id},
    {"name": "unpack$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "unpack", "symbols": [{"literal":"["}, "unpack$ebnf$1", "_", "_unpack", "_", "unpack$ebnf$2", {"literal":"]"}], "postprocess": ast.makeUnpack},
    {"name": "_unpack", "symbols": ["ident_list"], "postprocess": ast.strip},
    {"name": "_unpack$ebnf$1$subexpression$1$ebnf$1", "symbols": [{"literal":"\n"}], "postprocess": id},
    {"name": "_unpack$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_unpack$ebnf$1$subexpression$1", "symbols": ["_ident_list", "_", {"literal":","}, "_unpack$ebnf$1$subexpression$1$ebnf$1"], "postprocess": ast.strip},
    {"name": "_unpack$ebnf$1", "symbols": ["_unpack$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "_unpack$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_unpack$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":"\n"}, "_"]},
    {"name": "_unpack$ebnf$2$subexpression$1$ebnf$1", "symbols": ["_unpack$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "_unpack$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_unpack$ebnf$2$subexpression$1", "symbols": [{"literal":","}, "_unpack$ebnf$2$subexpression$1$ebnf$1", "_ident_list"], "postprocess": ast.strip},
    {"name": "_unpack$ebnf$2", "symbols": ["_unpack$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "_unpack$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_unpack", "symbols": ["_unpack$ebnf$1", "_", "array_blob", "_", "_unpack$ebnf$2"]},
    {"name": "string", "symbols": [{"literal":"'"}, "_string", {"literal":"'"}], "postprocess": ast.makeString},
    {"name": "_string", "symbols": []},
    {"name": "_string", "symbols": ["_string", "_stringchar"]},
    {"name": "_stringchar", "symbols": [/[^\\']/]},
    {"name": "_stringchar", "symbols": [{"literal":"\\"}]},
    {"name": "_stringchar$string$1", "symbols": [{"literal":"\\"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "_stringchar", "symbols": ["_stringchar$string$1"], "postprocess": () => ["'"]},
    {"name": "_charcharbinks", "symbols": [{"literal":"\""}], "postprocess": () => ["\""]},
    {"name": "_charcharbinks$ebnf$1$subexpression$1", "symbols": [{"literal":"\\"}]},
    {"name": "_charcharbinks$ebnf$1", "symbols": ["_charcharbinks$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "_charcharbinks$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_charcharbinks", "symbols": ["_charcharbinks$ebnf$1", /[^\"]/]},
    {"name": "char$string$1", "symbols": [{"literal":"\""}, {"literal":"\""}, {"literal":"\""}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "char", "symbols": ["char$string$1"]},
    {"name": "char$ebnf$1$subexpression$1", "symbols": [{"literal":"\\"}]},
    {"name": "char$ebnf$1", "symbols": ["char$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "char$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "char", "symbols": [{"literal":"\""}, "char$ebnf$1", /[^\"]/, {"literal":"\""}]},
    {"name": "bool", "symbols": ["_bool"], "postprocess": ast.makeBool},
    {"name": "_bool$string$1", "symbols": [{"literal":"t"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "_bool", "symbols": ["_bool$string$1"]},
    {"name": "_bool$string$2", "symbols": [{"literal":"f"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "_bool", "symbols": ["_bool$string$2"]},
    {"name": "expr_list", "symbols": ["_expr_list"], "postprocess": ast.makeExprList},
    {"name": "expr_list", "symbols": ["_expr_list", "_", {"literal":","}], "postprocess": ast.makeExprList},
    {"name": "_expr_list", "symbols": ["expr"]},
    {"name": "_expr_list", "symbols": ["_expr_list", "_", {"literal":","}, "_", "expr"], "postprocess": ast.flattenAndStrip},
    {"name": "crazy_identifier", "symbols": ["identifier"]},
    {"name": "crazy_identifier", "symbols": ["array_indexed"]},
    {"name": "identifier$ebnf$1", "symbols": []},
    {"name": "identifier$ebnf$1", "symbols": ["identifier$ebnf$1", /[\w]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "identifier", "symbols": [/[a-zA-Z_]/, "identifier$ebnf$1"], "postprocess": ast.makeIdentifier},
    {"name": "number$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "number$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number$ebnf$2", "symbols": [/[\d]/]},
    {"name": "number$ebnf$2", "symbols": ["number$ebnf$2", /[\d]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$1", "number$ebnf$2"], "postprocess": ast.makeNumber},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": ast.skip},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": ast.skip},
    {"name": "any_wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": ast.skip},
    {"name": "wschar", "symbols": [/[ \t\v\f]/], "postprocess": ast.skip},
    {"name": "break$ebnf$1", "symbols": [/[\n;]/]},
    {"name": "break$ebnf$1", "symbols": ["break$ebnf$1", /[\n;]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "break", "symbols": ["break$ebnf$1"], "postprocess": ast.skip}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
