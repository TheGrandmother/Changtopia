module trace

-- Lol on the fact that I am even attempting this.

def min(a,b)
  if a < b
    return a
  end
  return b
end

def max(a,b)
  if a >= b
    return a
  end
  return b
end


-- ========= VECTOR STUFF ============

-- Simplifications:
--  Camera at [0, 0, -1] pointing [0, 0, 1]
--  Viewport centered at origin and having width and height 1
--  FOV = 90deg
def get_pixel_ray(p_x, p_y, x_count, y_count)
  pixel_vec = core:vec3_norm([
    p_x/x_count - 1 / 2,
    p_y/y_count - 1 / 2,
    1
  ])
  return pixel_vec
end

def random_reflection(normal)
  return random_reflection(normal, .5)
end

def random_reflection(normal, spread)
  b3 = normal
  [_x, _, __] = b3
  match core:abs(_x) < .5
    true -> diff = [1,0,0] end
    false -> diff = [0,1,0] end
  end
  b1 = core:vec3_norm(core:vec3_cross(b3, diff))
  b2 = core:vec3_cross(b1, b3)

  z = core:rand_range(core:cos(core:pi() * spread), 1)
  r = core:sqrt(1-z*z)
  theta = core:rand_range(-1*core:pi(), core:pi())
  x = r * core:cos(theta)
  y = r * core:sin(theta)
  return core:vec3_norm(core:vec3_add(core:vec3_add(core:vec3_mul(b1, x), core:vec3_mul(b2, y)), core:vec3_mul(b3, z)))
end

def reflect(normal, direction)
  -- r = d -2(n.d)n
  return core:vec3_sub(direction, core:vec3_mul(normal, core:vec3_dot(normal, direction) * 2))
end

def refract(normal, direction, ior_out, ior_in)
  --https://www.flipcode.com/archives/reflection_transmission.pdf
  q = ior_out / ior_in
  cossy = core:vec3_dot(direction, normal)
  sinny = q*q * (1 - (cossy * cossy))
  if sinny > 1
    return core:vec3_sub(direction, core:vec3_mul(normal, core:vec3_dot(normal, direction) * 2))
  end
  return core:vec3_sub(core:vec3_mul(direction, q), core:vec3_mul(normal, q*cossy + core:sqrt(1 - sinny)))
end


-- ========= GEOMETRY =======

-- https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/moller-trumbore-ray-triangle-intersection
def triangle_intersect_test(ray, triangle)
  [v0, v1, v2] = triangle
  [start, direction] = ray

  epsilon = 0.000001

  v0v1 = core:vec3_sub(v1, v0)
  v0v2 = core:vec3_sub(v2, v0)
  pvec = core:vec3_cross(direction, v0v2)
  det = core:vec3_dot(v0v1, pvec)
  if core:abs(det) <= epsilon
    -- io:debug('Determinant sero')
    return $miss
  end

  inv_det = 1 / det

  tvec = core:vec3_sub(start, v0)
  u = core:vec3_dot(pvec, tvec) * inv_det
  if u < -1*epsilon || u > 1 - epsilon
    --io:debug_raw([$u_silly, u])
    return $miss
  end

  qvec = core:vec3_cross(tvec, v0v1)
  v = core:vec3_dot(direction, qvec) * inv_det

  if v < -1*epsilon || u + v > 1 - epsilon
    --io:debug('v silly')
    return $miss
  end

  t = core:vec3_dot(v0v2, qvec) * inv_det
  if t < epsilon
    return $miss
  end
  return t
end

def triangle_normal(triangle)
  [v0, v1, v2] = triangle
  v0v1 = core:vec3_sub(v1, v0)
  v0v2 = core:vec3_sub(v2, v0)
  return core:vec3_norm(core:vec3_cross(v0v1,v0v2))
end

def sphere_intersect_test(ray, sphere)
  [start, direction] = ray
  [center, radius] = sphere
  l = core:vec3_sub(start, center) --thing from start to center
  thing = core:vec3_dot(direction, l)
  mag_l = core:vec3_mag(l)
  disc = thing*thing - (mag_l * mag_l - radius * radius)
  if disc < 0
    return $miss
  end
  t = min((-1*thing) + core:sqrt(disc), (-1*thing) - core:sqrt(disc))
  if t <= 0
    return $miss
  end
  return t
end

def sphere_normal(sphere, point)
  [center, radius] = sphere
  return core:vec3_norm(core:vec3_sub(point, center))
end

def get_normal([_, $triangle, geo, <<_>>], _)
  return triangle_normal(geo)
end

def get_normal([_, $sphere, geo, <<_>>], point)
  return sphere_normal(geo, point)
end

def find_nearest([], ray, nearest, _)
  return nearest
end

def find_nearest([obj, <<rest>>], ray, nearest, id)
  [_, type, geo, mat, <<meta>>] = obj
  match meta
    [hint_id] ->
      if id != $none && hint_id == id
        return find_nearest(rest, ray, nearest, id)
      end
    end
  end
  match type
    $sphere -> t = sphere_intersect_test(ray, geo) end
    $triangle -> t = triangle_intersect_test(ray, geo) end
  end
  if t == $miss
    return find_nearest(rest, ray, nearest, id)
  end
  if nearest == $miss
    return find_nearest(rest, ray, [t, obj], id)
  end
  [old_t, _] = nearest
  if t < old_t
    return find_nearest(rest, ray, [t, obj], id)
  end
  return find_nearest(rest, ray, nearest, id)
end

def find_nearest(objects, ray)
  return find_nearest(objects, ray, $miss, $none)
end

def trace(objects, ray, nearest)
  return trace(objects, ray, nearest, 5, true, 1)
end

def trace(objects, ray, _, 0, _, _)
  return $out_of_bounce
end

def trace(objects, ray, nearest, bounce, first, incoming_ior)
  [solids, hints] = objects
  if nearest == $unkown
    nearest = find_nearest(solids, ray)
    if nearest == $miss
      return [0, 0, 0]
    end
  end
  [t, obj] = nearest
  [_id, _type, _meh, mat, <<_>>] = obj
  match mat-- Relying the buggy lack of scoping here :P
    [color, diffuse_reflexivity, emittance, direct_reflexivity, transparency, ior] -> _ = 1 end
    [color, diffuse_reflexivity, emittance, direct_reflexivity] ->
      transparency = 0
      ior = 1
    end
  end
  emitted_color = core:vec3_mul(color, emittance)

  if emittance > 0.95
    --not affected by incoming light
    return core:vec3_mul(emitted_color, emittance)
  end

  [origin, direction] = ray
  point = core:vec3_add(origin, core:vec3_mul(direction, t))

  normal = get_normal(obj, point)
  -- if core:vec3_dot(normal, direction) > 0
  --  -- hitting from behing, flip normal
  --  normal = core:vec3_mul(normal, -1)
  --end

  -- HINT STEP

  [x, <<_>>] = direction
  hint_color = [0,0,0]

  -- DIFUSE STEP

  diffuse_color = [0, 0, 0]
  if diffuse_reflexivity > 0.01
    new_ray = random_reflection(normal)
    incoming = trace(objects, [point , new_ray], $unkown, bounce - 1, false, incoming_ior)
    match incoming
      $out_of_bounce ->
        diffuse_color = hinting(point, normal, solids, hints, diffuse_reflexivity)
      end
      c ->
        thing = core:vec3_dot(new_ray, normal) * diffuse_reflexivity
        diffuse_color = core:vec3_mul(incoming, thing)
        if core:vec3_mag(c) < 0.5
          hint = hinting(point, normal, solids, hints, diffuse_reflexivity)
          if hint != [0,0,0]
            diffuse_color = core:vec3_add(diffuse_color, hint)
          end
        end
      end
    end
  end

  -- DIRECT STEP

  direct_color = [0, 0, 0]
  if direct_reflexivity > 0
    new_ray = reflect(normal, direction)
    incoming = trace(objects, [point , new_ray], $unkown, bounce - 1, false, incoming_ior)
    match incoming
      $out_of_bounce -> direct_color = [0,0,0] end
      _ ->
        direct_color = core:vec3_mul(incoming, direct_reflexivity)
      end
    end
  end

  -- TRANSPARENT STEP

  transparent_color = [0, 0, 0]
  if transparency > 0
    new_ray = refract(normal, direction, incoming_ior, ior)
    incoming = trace(objects, [point , new_ray], $unkown, bounce - 1, false, ior)
    match incoming
      $out_of_bounce -> transparent_color = [0,0,0] end
      _ ->
        transparent_color = core:vec3_mul(incoming, transparency)
      end
    end
  end

  total_traced_color = core:vec3_add(core:vec3_add(diffuse_color, direct_color), transparent_color)
  if total_traced_color == [0,0,0] || core:vec3_mag(total_traced_color) < 0.01
    return $out_of_bounce
  end

  return core:vec3_mul(core:vec3_proj(color, total_traced_color), core:vec3_mag(total_traced_color))
end

def hinting(point, normal, solids, hints, diffuse_reflexivity)
  find_light_paths = def (hints, rays)
    match hints
      [] -> return rays end
      [hint, <<rest>>] ->
        [pos, id] = hint
        light_dir = core:vec3_sub(pos, point)
        if core:vec3_dot(light_dir, normal) < 0
          return @find_light_paths(rest, rays)
        end
        if light_dir == [0,0,0]
          return @find_light_paths(rest, rays)
        end
        distance_to_light = core:vec3_mag(light_dir)
        light_dir = core:vec3_norm(light_dir)
        match find_nearest(solids, [point, light_dir], $miss, id)
          $miss ->
            return @find_light_paths(rest, [<<rays>>, [light_dir, id]])
          end
          [t, obj] ->
            point_of_intersection = core:vec3_add(point, core:vec3_mul(light_dir, t))
            distance_to_intersection = core:vec3_mag(core:vec3_sub(point_of_intersection, point))
            if distance_to_intersection > distance_to_light
              return @find_light_paths(rest, [<<rays>>, [light_dir, id]])
            end
            return @find_light_paths(rest, rays)
          end
        end
      end
    end
  end

  hint_vectors = @find_light_paths(hints, [])

  drop_by_id = def(objects, id, acc)
    match objects
      [] -> return acc end
      [obj, <<rest>>] ->
        match obj
          [_, _, _, _] -> return @drop_by_id(rest, id, [<<acc>>, obj]) end
          [_, _, _, _, hint_id] ->
            if hint_id == id
              return @drop_by_id(rest, id, acc)
            end
            return @drop_by_id(rest, id, [<<acc>>, obj])
          end
          _ -> return @drop_by_id(rest, id, [<<acc>>, obj]) end
        end
      end
    end
  end

  hint_count = core:length(hint_vectors)

  trace_hints = def (hint_vectors, light)
    match hint_vectors
      [] -> return light end
      [hint, <<rest>>] ->
        [vector, id] = hint
        new_ray = random_reflection(vector, 0.05)
        --new_ray = vector
        if core:vec3_dot(new_ray, normal) < 0.001
          -- Casting ray behind object
          return @trace_hints(rest, light)
        end
        match find_nearest(@drop_by_id(solids, id, []), [point, vector])
          $miss -> return @trace_hints(rest, light) end
          [t, obj] ->
            [_, _, _, mat, <<_>>] = obj
            [light_color, _, hint_emittance, _hint_reflextivity] = mat
            thing = core:vec3_dot(new_ray, normal) * diffuse_reflexivity
            emitted_hint_light = core:vec3_mul(light_color, hint_emittance)
            return @trace_hints(rest, core:vec3_add(light, core:vec3_mul(emitted_hint_light, thing)))
          end
        end
      end
    end
  end
  return core:vec3_mul(@trace_hints(hint_vectors, [0,0,0]),1)
end

-- ============ RENDERING =================

def plot_pixel(x, y, color)
  f = def (c)
    return min(core:floor(c*255), 255)
  end
  [r, g, b] = color
  io:print_string([
    <<core:ansi_cursor_to(x, y)>>,
    <<core:ansi_color(@f(r), @f(g), @f(b))>>,
    <<'█'>>,
    <<core:ansi_color_reset()>>]
    )
end

def tag_objects(objects)
  return tag_objects(objects, 0,[])
end

def tag_objects([], _, acc)
  return acc
end

def tag_objects([obj, <<rest>>], n, acc)
  return tag_objects(rest, n + 1, [<<acc>>, [n, <<obj>>]])
end

def render(width, height, _scene)
  [_objects, hints] = _scene
  objects = tag_objects(_objects)
  scene = [objects, hints]

  io:debug_raw([width, height])
  io:print_string('Performing precalculations...\n')
  [ids, data, sample_counts] = [
    <<pre_compute(width, height, scene)>>,
    list:map(list:range(height),
    def (_) return list:repeat(width) end)
  ]

  io:print_string('Starting workers...\n')

  sampels_per_pass = 10

  workers = list:map(list:range(core:send(core:io_pid(), $cpu_count)), def (_)
    kid = core:spawn(['trace', 'worker'], width, height, core:my_pid(), scene, ids, data, sampels_per_pass)
    core:link(kid)
    return kid
  end)

  listener = def (pixels, n, sender, payload)
    match payload
      [$render_results, y, samples] ->
        start = core:time()
        match list:get(pixels, y)
          [] ->
            prev_samples = 0
            new_row = list:map(samples, def (s)
              [samples, color] = s
              if samples == 0
                return [0, color]
              end
              return [samples, core:vec3_mul(color, 1 / samples)]
            end)
          end
          row ->
            new_row = list:map(list:zip(samples, row), def (meh)
              [new, old] = meh
              [new_samples, new_color] = new
              [old_samples, old_color] = old
              if new_samples == 0
                return [old_samples, old_color]
              end
              return [
                old_samples + 1,
                core:vec3_mul(core:vec3_add(core:vec3_mul(old_color, old_samples), new_color), 1/(old_samples+new_samples))
              ]
            end)
          end
        end
        draw_line(y, width, new_row)
        new_pixels = list:set(pixels, y, new_row)
        return [$rendered, new_pixels, sender]
      end
      [$error, <<_>>] ->
        io:print_string(io:format_error(payload))
        list:map(workers, def (pid) core:send(core:io_pid(), $kill, pid) end)
        return $quit
      end
    end
  end

  handler = def (pixels, n)
    match core:listen(listener, pixels, n)
      [$rendered, new_pixels, sender] ->
        new_n = select_next_row(n, height)
        core:send(sender, [$render, new_n])
        return @handler(new_pixels, new_n)
      end
      $quit -> return $ok end
    end
  end

  list:for_each(workers, def (pid) core:send(pid, [$render, core:floor(core:rand_range(0, height-1))]) end)
  @handler(list:repeat([], height), 0)

  return $ok
end

def select_next_row(n, height)
  return (n + 1) % (height - 1)
end


def worker(width, height, parent, scene, ids, data, sampels_per_pass)
  mark_row = def (y, color)
    io:print_string([
      <<core:ansi_cursor_to(width, y)>>,
      <<colors:get_color(color)>>,
      <<core:pid_to_string(core:my_pid())>>,
      <<core:ansi_color_reset()>>]
      )
  end
  core:link(parent)
  io:print_string('Worker started\n')
  listener = def (idle_start, sender, payload)
    -- io:debug_raw([$idle_time, core:time() - idle_start])
    match payload
      [$render, y] ->
        @mark_row(y, 'green')
        start = core:time()
        pixels = render_line(y, width, height, list:get(data, y), scene, sampels_per_pass)
        core:send(sender,[$render_results, y, pixels])
        @mark_row(y, 'yellow')
        -- io:debug_raw([$render_time, core:time() - start])
        return core:time()
      end
      [$quit] -> return $quit end
    end
    return $quit
  end
  handler = def (idle_start)
    match core:listen(listener, idle_start)
      $quit -> return $ok end
      idle_start -> return @handler(idle_start) end
    end
  end
  @handler(0)
end

def pre_compute(width, height, scene)
  return pre_compute(width, height, height - 1, 0, scene, [], [])
end

def pre_compute(width, height, -1, _, scene, ids, data)
  return [list:partition(ids, height), list:partition(data, height)]
end

def pre_compute(width, height, y, x, scene, ids, data)
  if x == width
    return pre_compute(width, height, y - 1, 0, scene, ids, data)
  end
  pixel_direction = get_pixel_ray(x, y, width, height)
  origin = [0,0,-1]
  ray = [origin, pixel_direction]
  [solids, hints] = scene
  match find_nearest(solids, ray)
    $miss -> return  pre_compute(width, height, y, x + 1, scene, [<<ids>>, $void], [<<data>>, $void]) end
    nearest ->
      [t, obj] = nearest
      [id, _, _, mat, <<_>>] = obj
      [_, _, _, direct, <<_>>] = mat
      if direct > 0.3
        return pre_compute(width, height, y, x + 1, scene, [<<ids>>, [$mirror, id]], [<<data>>, [nearest, ray]])
      end
      return pre_compute(width, height, y, x + 1, scene, [<<ids>>, [$plain, id]], [<<data>>, [nearest, ray]])
    end
  end
end

def draw_line(y, width, pixels)
  make_pixel = def (pixels, count, res)
    match pixels
      [] -> return  [count, res] end
      [meh, <<rest>>] ->
        [samples, color] = meh
        [r,g,b] = color
        f = def (c)
          return min(core:floor(c*255), 255)
        end
        [r, g, b] = color
        return @make_pixel(rest, count + samples, [<<res>>,
          <<core:ansi_color(@f(r), @f(g), @f(b))>>,
          <<'█'>>,
          ])
      end
    end
  end
  [count, string] = @make_pixel(pixels, 0, [])
  string = [<<core:ansi_cursor_to(0, y)>>, <<string>>, <<core:ansi_color_reset()>>, <<core:cast(count, 'string')>>, <<core:ansi_erase_end_line()>>]
  io:print_string(string)
end

def render_line(y, width, height, precomp, scene, samples)
  render_pixel = def (meh)
    [x, precomp] = meh
    if precomp == $void
      return [0, [0,0,0]]
    end
    [nearest, ray, <<meh>>] = precomp
    [_, obj] = nearest
    [_, _, _, mat, <<_>>] = obj
    [color, _, emittance, <<_>>] = mat
    if emittance > 0.95
      -- Blackbody
      return [0, core:vec3_mul(color, emittance)]
    end
    take_samples = def (n, cool_bois ,res)
      if n == samples
        return [cool_bois, res]
      end
      color = trace(scene, ray, nearest)
      if color == [0,0,0] || color == $out_of_bounce
        return @take_samples(n + 1, cool_bois, res)
      end
      return @take_samples(n + 1, cool_bois + 1, core:vec3_add(res, color))
    end
    return @take_samples(0, 0, [0,0,0])
  end
  return list:map(list:zip(list:range(width), precomp), render_pixel)
end

def _entry([])
  if _test() == false
    return $ok
  end
  io:print_string(core:ansi_cursor_to(0,0))
  io:print_string(core:ansi_clear_screen())
  utils:load_module('colors')
  utils:load_module('scenes')
  [width, height] = core:request(core:io_pid(), $get_console_size)
  scene = scenes:make_room()
  -- [meh, _] =scene
  -- render(height*2,height, [meh, []])
  render(height*2,height, scene)
  return $ok
end

def _test()
  utils:load_module('testing')
  utils:load_module('vec3')
  suite = [
    ['sphere_intersect_test hit',
      def (superv)
        sphere = [[5,0,0],1]
        ray = [[0,0,0], [1,0,0]]
        intersect = sphere_intersect_test(ray, sphere)
        testing:assert(superv, 'does not miss', intersect != $miss)
        testing:assert(superv, 'Hits at [4 0 0]', [4, 0, 0], core:vec3_mul([1,0,0], intersect))
      end
    ],
    ['sphere_intersect_test miss',
      def (superv)
        sphere = [[0,5,0],1]
        ray = [[0,0,0], [1,0,0]]
        intersect = sphere_intersect_test(ray, sphere)
        testing:assert(superv, 'does not miss', intersect == $miss)
      end
    ],
    ['random_ref',
      def (superv)
        norm = [core:rand_range(-1,1), core:rand_range(-1,1) , core:rand_range(-1,1)]
        testing:assert(superv, 'n·random(n) > 0', core:vec3_dot(random_reflection(norm),norm) > 0)
      end
    ],
    ['triangle intersection test',
      def (superv)
        triangle = [
          [-1, -1, 0],
          [0, 1, 0],
          [1, -1, 0]
        ]
        ray = [[0,0,-1], [0,0,1]]
        testing:assert(superv, 'hits at 1', triangle_intersect_test(ray, triangle), 1)
        ray = [[0,0,-1], [0,0,-1]]
        testing:assert(superv, 'reversed misses', $miss, triangle_intersect_test(ray, triangle))
      end
    ],
    ['reflect',
      def (superv)
        testing:assert(superv, 'headon is same but backwards', reflect([0,1,0], [0,-1,0]), [0,1,0])
        testing:assert(superv, 'orthog remains the same', reflect([0,1,0], [1,0,0]), [1,0,0])
        testing:assert(superv, 'basic dude', reflect([0,1,0], [1,-1,0]), [1,1,0])
      end
    ],
  ]
  return testing:run_suite('Trace', suite)
end

def segment_by_id([], current_type, current_segment, res)
  return [<<res>>, [current_type, current_segment]]
end

def segment_by_id([stuff, <<rest>>], current_type, current_segment, res)
  [type, p] = stuff
  if type == current_type
    return segment_by_id(rest, current_type, [<<current_segment>>, p], res)
  end
  return segment_by_id(rest, type, [p], [<<res>>, [current_type, [<<current_segment>>]]])
end

def smooth_yoda(ids, pixels)

  [meh_id, <<id_rest>>] = ids
  [meh_pixel, <<pixel_rest>>] = pixels

  smoothify = def (segments, res)
    match segments
      [] -> return res end
      [meh, <<rest>>] ->
        [type, segment] = meh
        match type
          [$plain, _] ->
            [samples, colors] = list:unzip(segment)
            return @smoothify(rest, [<<res>>, <<list:zip(samples, window_3_avg(colors))>>])
          end
          whatever ->
            return @smoothify(rest, [<<res>>, <<segment>>])
          end
        end
      end
      kuken ->
        io:debug_raw(kuken)
        return $kuken
      end
    end
  end
  seg = segment_by_id(list:zip(id_rest, pixel_rest), meh_id, [meh_pixel] , [])
  return @smoothify(seg, [])
end

def window_3_avg(l)
  return window_3_avg([], l, [])
end

def window_3_avg(_, [], res)
  return res
end

def window_3_avg([], [a], res)
  return [a]
end

def window_3_avg([], [a, b], res)
  avg = core:vec3_mul(core:vec3_add(a,b),5)
  return [avg, avg]
end

def window_3_avg([], [a, b, c, <<rest>>], res)
  new_a =  core:vec3_mul(core:vec3_add(a, b), .5)
  new_b =  core:vec3_mul(core:vec3_add(a, core:vec3_add(b, c)), 1/3)
  return window_3_avg([b, a], [c, <<rest>>], [<<res>>, new_a, new_b])
end

def window_3_avg([a, <<meh>>], [b, c, <<rest>>], res)
  new_b =  core:vec3_mul(core:vec3_add(a, core:vec3_add(b, c)), 1/3)
  return window_3_avg([b, a, <<meh>>], [c, <<rest>>], [<<res>>, new_b])
end
def window_3_avg([a, <<meh>>], [b, <<rest>>], res)
  new_b =  core:vec3_mul(core:vec3_add(a, b), .5)
  return window_3_avg([b, a, <<meh>>], [<<rest>>], [<<res>>, new_b])
end

