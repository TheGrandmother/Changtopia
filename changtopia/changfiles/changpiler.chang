module changpiler

def changpile(input, options)
  return bif:send(bif:io_pid(), $changpile, input, list:map(options, ['bif', 'to_atom']))
end

def print_help()
  io:print_string(list:join_with([
  'This is the changpiler for the programming language changlang.',
  'It takes the name of the file to be compiled as its first and mandatory argument.',
  'If the file compiles the module name specified in the file will be available for loading.',
  '',
  'There are a some underwhelming arguments available:',
  '  no_tail_opt:       Disables tail call optimization. Useful if you want to run out of ram',
  '  show_ast:          Shows the AST generated, quite useless.*',
  '  show_intermediate: Shows the intermediate code, immensely useless.*',
  '  show_compiled:     Shows the prettified compiled code, essentially useless but can be fun.*',
  '  run:               Loads the module and runs the _entry function, without any arguments supplied',
  '',
  '* These options do not generate any compiled output'
  ], '\n'))
end

def _entry(args)
  match args
    [] ->
      io:print_string('The changpiler takes at least one argument.\n')
      return $ok
    end
    [x] ->
      match x
        'help' ->
          print_help()
          return $ok
        end
      end
    end
  end
  [file_name, <options>] = args
  match bif:request(bif:io_pid(), $open_file, file_name)
    [_, filePid] ->
      content = bif:request(filePid, $read_all)
      result = changpile(content, options)
      match result
        [$ok, module_name] ->
          if list:contains(options, 'run')
            _ = utils:load_module(module_name)
            return bif:run([module_name, '_entry'])
          end
          io:print_strings(['Successfully compiled ', file_name, ' as module ', module_name,'\n'])
          return $ok
        end
        [$pretty, pretty] ->
          display_content = [pretty, '\n']
        end
        [$ast, ast] ->
          display_content = [ast, '\n']
        end
        [$intermediate, intermediate] ->
          display_content = [intermediate, '\n']
        end
        [$error, msg] ->
          io:print_strings(['Error compiling ', file_name, ':\n', msg])
          return $ok
        end
      end
    end
    [$file_not_found] -> io:print_string('File not found\n') end
  end
  utils:load_module('view')
  view:scroll_or_show(list:flatten(display_content))
  return $ok
end
