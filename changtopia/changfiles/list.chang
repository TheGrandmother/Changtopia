module list

def reverse(l)
  reverse(l, [])
end

def reverse([], acc)
  return acc
end

def reverse([x, <<rest>>], acc)
  return reverse(rest, [x, <<acc>>])
end

def get(l, n)
  match l
    [] -> return $nothing end
    [x, <<rest>>] ->
      if n == 0
        return x
      end
      return get(rest, n - 1)
    end
  end
end

def set(l, n, item)
  if n >= core:length(l)
    return l
  end
  if n < 0
    return l
  end
  return set(l, n, item, 0, [])
end

def set([x, <<rest>>], n, item, count, res)
  if count == n
    return [<<res>>, item, <<rest>>]
  end
  if rest == []
    return res
  end
  return set(rest, n, item, count + 1, [<<res>>, x])
end

def _test_set()
  return ['set',
    def (superv)
      testing:assert(superv, 'set([1,2,3], 1, 1337) == [1, 1337, 3]', set([1,2,3], 1, 1337), [1, 1337, 3])
      testing:assert(superv, 'set([1,2,3], 1024, 1337) == [1,2,3]', set([1,2,3], 1024, 1337), [1, 2, 3])
      otto = [1,2,3]
      otto = set(otto, 0, 1337)
      otto = set(otto, 1, 17)
      otto = set(otto, 2, 42)
      otto = set(otto, 0, 16)
      testing:assert(superv, 'Setting isnt just wierd', [16,17,42], otto)
    end
  ]
end

def length(list)
  return core:length(list)
end

def range(finish)
  return range(0, finish)
end

def range(start, finish)
  _range = def (n, acc)
    if n >= finish
      return acc
    end
    return @_range(n+1, [<<acc>>, n])
  end
  return @_range(start, [])
end

def _test_range()
  return ['range',
    def (superv)
      range = range(0, 0)
      testing:assert(superv, 'Range of length 0 is empty', [], range)
      range = range(0, 5)
      testing:assert(superv, 'range(0,5) == [0,1,2,3,4]', [0,1,2,3,4], range)
      range = range(-2, 2)
      testing:assert(superv, 'range(-2,2) == [-2, -1, 0, 1]', [-2, -1, 0, 1], range)
      range = range(5, 0)
      testing:assert(superv, 'Backwards range is empty list', [], range)
    end
  ]
end

-- Broken when length(l) < n
def partition(l, n)
  if n == 0
    return [[]]
  end
  segment_length = core:cast(core:length(l) / n, 'integer')

  _partition = def (l, current_segment, curr_length, segments_left, segments)
    if curr_length == segment_length
      if segments_left == 1
        return [<<segments>>, [<<current_segment>>, <<l>>]]
      end
      return @_partition(l, [], 0, segments_left - 1, [<<segments>>, current_segment])
    end
    match l
      [] -> return [<<segments>>, current_segment] end
      [x ,<<rest>>] ->
        return @_partition(rest, [<<current_segment>>, x], curr_length + 1, segments_left, segments)
      end
    end
  end
  return @_partition(l, [], 0, n, [])
end

def _test_partition()
  return ['partition',
    def (superv)
      p = partition([], 0)
      testing:assert(superv, 'partition([], 0)', [[]], p)
      p = partition([], 3)
      testing:assert(superv, 'partition([], 3)', [[], [], []], p)
      p = partition([1,2,3], 2)
      testing:assert(superv, 'partition([1,2,3], 2)', [[1], [2,3]], p)
      p = partition([1,2,3], 3)
      testing:assert(superv, 'partition([1,2,3], 3)', [[1], [2],[3]], p)
      -- p = partition([1,2,3], 4)
      -- testing:assert(superv, 'partition([1,2,3], 4) == ', [[1], [2],[3],[]], p)
    end
  ]
end

def pad_left(list, pad, length)
  if core:length(list) >= length
    return list
  end
  padding = repeat(pad, length - core:length(list))
  return [<<padding>>, <<list>>]
end

def pad_right(list, pad, length)
  if core:length(list) >= length
    return list
  end
  padding = repeat(pad, length - core:length(list))
  return [<<list>>, <<padding>>]
end

def _test_pad()
  return ['pad',
    def (superv)
      p = pad_left([1,1], 0, 3)
      testing:assert(superv, 'pad_left([1,1], 0, 3)', [0,1,1], p)
      p = pad_left([1,1], 0, 2)
      testing:assert(superv, 'pad_left([1,1], 0, 2)', [1,1], p)
      p = pad_left([1,1], 0, 1)
      testing:assert(superv, 'pad_left([1,1], 0, 1)', [1,1], p)
      p = pad_left([], 0, 2)
      testing:assert(superv, 'pad_left([], 0, 2)', [0,0], p)

      p = pad_right([1,1], 0, 3)
      testing:assert(superv, 'pad_right([1,1], 0, 3)', [1,1,0], p)
      p = pad_right([1,1], 0, 2)
      testing:assert(superv, 'pad_right([1,1], 0, 2)', [1,1], p)
      p = pad_right([1,1], 0, 1)
      testing:assert(superv, 'pad_right([1,1], 0, 1)', [1,1], p)
      p = pad_right([], 0, 2)
      testing:assert(superv, 'pad_right([], 0, 2)', [0,0], p)
    end
  ]
end

def contains(list, element)
  match list
    [] -> return false end
    [x, <<rest>>] ->
      if x == element
        return true
      end
        return contains(rest, element)
    end
  end
end


def repeat(length)
  return repeat(0, length)
end

def repeat(x, length)
  _ = def (n, acc)
    if n >= length
      return acc
    end
    return @_(n + 1, [<<acc>>, x])
  end
  return @_(0, [])
end

def flatten(lists)
  --return _flatten(lists, [])
  return core:flatten(lists)
end

def _flatten(lists, acc)
  match lists
    [] ->
      return acc
    end
    [x] ->
      if core:is_array(x)
        return [<<acc>>, <<x>>]
      end
      return lists
    end
    [head, <<tail>>] ->
      if core:is_array(head)
        return _flatten(tail, [<<acc>>, <<head>>])
      end
      return lists
    end
  end
  return acc
end

def drop_empty(list)
  drop = def (list, acc)
    match list
      [] -> return acc end
      [[], <<rest>>] -> return @drop(rest, acc) end
      [x, <<rest>>] -> return @drop(rest, [<<acc>>, x]) end
    end
  end
  return @drop(list, [])
end

def join_with(list, delim)
  return _join_with(list, delim, [])
end

def _join_with(list, delim, acc)
  match list
    [x, <<rest>>] ->
      return _join_with(rest, delim, [<<acc>>, <<x>>, <<delim>>])
    end
    [x] ->
      return [<<acc>>, <<x>>]
    end
    [] ->
      return acc
    end
  end
end

def split_by(list, delimiter)
  return _split_by(list, delimiter, [], [])
end

def _split_by(list, delimiter, current_word, res)
  match list
    [] ->
      return [<<res>>, current_word]
    end
    [thing, <<tail>>] ->
      if thing == delimiter
        return _split_by(tail, delimiter,  [], [<<res>>, current_word])
      end
      return _split_by(tail, delimiter, [<<current_word>>, thing], res)
    end
  end
  -- I think this a bug here... I have to think at some point in my life
  return res
end

def all(list)
  match list
    [x] ->
      return x
    end
    [x ,<<rest>>] ->
      return x && all(rest)
    end
  end
end

def for_each(list, fn)
  match list
    [] ->
      return $ok
    end
    [x, <<rest>>] ->
      core:run(fn, x)
      return for_each(rest, fn)
    end
  end
end

def filter(list, fn)
  return filter(list, fn, [])
end

def filter(list, fn, res)
  match list
    [] ->
      return res
    end
    [x, <<rest>>] ->
      if core:run(fn, x)
        return filter(rest, fn, [<<res>>, x])
      end
      return filter(rest, fn, res)
    end
  end
end

def map(list, fn)
  return map(list, fn, [])
end

def map(list, fn, res)
  match list
    [] ->
      return res
    end
    [x, <<rest>>] ->
      return map(rest, fn, [<<res>>, core:run(fn, x)])
    end
  end
end

def zip(list1, list2)
  if core:length(list1) != core:length(list2)
    _ = 1/0
    return [$error, $zip_length_missmatch, 'Zipping lists of different lengths is silly.', '']
  end
  return zip(list1, list2, [])
end

def zip(l1, l2, res)
  match l1
    [] ->
      return res
    end
    whatever ->
      return zip(tail(l1), tail(l2), [<<res>>, [head(l1), head(l2)]])
    end
  end
end

def unzip(l)
  return unzip(l, [], [])
end

def unzip([], la, lb)
  return [la, lb]
end

def unzip([[a, b], <<rest>>], la, lb)
  return unzip(rest, [<<la>>, a], [<<lb>>, b])
end

def _test_zip()
  return ['pad',
    def (superv)
      u = unzip([[1,2], [3,4]])
      testing:assert(superv, 'unzip([[1,2], [3,4]])', [[1,3],[2,4]], u)
      u = unzip([[1,2]])
      testing:assert(superv, 'unzip([[1,2]])', [[1],[2]], u)
    end
  ]
end

def split_at(arr, index)
  thing = def (n, tail, head)
    match tail
      [x , <<rest>>] ->
        match n < index
          true ->
            return @thing(n + 1, rest, [<<head>>, x])
          end
          false ->
            return [head, tail]
          end
        end
      end
    end
    return [[],[]]
  end

  return @thing(0, arr, [])
end

def slice(from, to, arr)
  skip = def (n, acc)
    match acc
      [_ , <<rest>>] ->
        match n < from
          true ->
            return @skip(n + 1, rest)
          end
          false ->
            return acc
          end
        end
      end
    end
    return []
  end

  arr = @skip(0, arr)

  grab = def (n, arr, res)
    match arr
      [x, <<rest>>] ->
        match n < to - from
          true ->
            return @grab(n + 1, rest, [<<res>>, x])
          end
          false ->
            return [<<res>>, x]
          end
        end
      end
      whatever ->
        return res
      end
    end
  end

  return @grab(0, arr, [])
end

def head(l)
  [h, <<_>>] = l
  return h
end

def tail(l)
  [_, <<t>>] = l
  return t
end


def pmap(list, fn)
  cpu_count = core:send(core:io_pid(), $cpu_count)
  segment_count = cpu_count
  if cpu_count > core:length(list)
    segment_count = core:length(list)
  end
  segments = zip(range(segment_count), partition(list, segment_count))
  results = range(segment_count)
  spawner = def (segment)
    pid =  core:spawn(['list', 'pmap_worker'], segment, fn, core:my_pid())
    return pid
  end
  listener = def (sender, payload)
    match payload
      [$error, <<_>>] ->
        return [$fail, payload]
      end
      [n, res] -> return [$part, n, res] end
    end
  end
  wait_for_complete = def (remaining, result)
    if remaining == 0
      return [$done, result]
    end
    match core:listen(listener)
      [$fail, error] -> return error end
      [$part, n, res] ->
        return @wait_for_complete(remaining - 1, set(result, n, res))
      end
    end
  end
  kill_worker = def (pid) core:send(core:io_pid(), $kill, pid) end
  workers = map(segments, spawner)
  match @wait_for_complete(segment_count, range(segment_count))
    [$done, res] -> return flatten(res) end
    [$fail, error] ->
      for_each(workers, kill_worker)
      return error
    end
    [$error, <<rest>>] ->
      for_each(workers, kill_worker)
      return [$error, <<rest>>]
    end
  end
end

def pmap_worker(segment, fn, parent)
  [n, list] = segment
  core:link(parent)
  kuken = [n, map(list, fn)]
  core:send(parent, kuken)
end


-- Basic merge sort for now
def sort(list, fn)
  if core:length(list) <= 1 return list end
  [left, right] = list:partition(list, 2)

  left = sort(left, fn)
  right = sort(right, fn)

  merge = def (l, r, res)
    match [core:length(l) == 0, core:length(r) == 0]
      [false, false] ->
        [l_head, <<l_rest>>] = l
        [r_head, <<r_rest>>] = r
        comp = @fn(l_head, r_head)
        if comp <= 0
          return @merge(l_rest, r, [<<res>>, l_head])
        end
        return @merge(l, r_rest, [<<res>>, r_head])
      end
      whatever -> return [<<res>>, <<l>>, <<r>>] end
    end
  end

  return @merge(left, right, [])
end

def fold_l([], acc, fn)
  return acc
end

def fold_l([x, <<rest>>], acc, fn)
  return fold_l(rest, @fn(acc, x), fn)
end

def _test()
  utils:load_module('testing')
  suite = [
    _test_range(),
    _test_partition(),
    _test_pad(),
    _test_zip(),
    _test_set()
  ]
  testing:run_suite('List Module', suite)
end

def _entry([])
  _test()
end
