module testing

-- A horrible little testing framework

def assert(superv, message, condition)
  if condition == false
    core:send(superv, [$condition_failure, message])
    return $ok
  end
  core:send(superv, [$pass])
  return $ok
end

def assert(superv, message, expected, actual)
  if expected != actual
    core:send(superv, [$equality_failure, message, expected, actual])
    return $ok
  end
  core:send(superv, [$pass])
  return $ok
end

def run_suite(title, tests)
  utils:load_module('colors')
  io:print_strings(['Testing ', title, ': '])
  test_count = core:length(tests)
  failed_tests = 0
  finished_tests = 0

  make_test_worker = def (superv, clause)
    [title, thing] = clause
    hack = def (proxy)
      core:link(proxy)
      @thing(proxy)
      core:send(proxy, [$completed])
    end
    core:spawn(hack, core:my_pid())
    listener = def (sender, payload)
      [otto, <<_>>] = payload
      core:send(superv, [title, <<payload>>])
      match payload
         [$completed] -> return $ok end
         [$error, <<rest>>] -> return $ok end
         whatever ->
            core:listen(listener)
         end
      end
    end
    core:listen(listener)
  end

  list:map(tests, def (case) core:spawn(make_test_worker, core:my_pid(), case) end)

  listener = def (sender, payload)
    match payload
      [title, $completed] ->
        return $finished
      end
      [title, $pass] ->
        io:print_strings([colors:wrap('green', '.')])
        return $pass
      end
      [title, $error, <<rest>>] ->
        [type_atom, message, stack] = rest
        io:print_strings([colors:wrap('amber', '!')])
        return [$errored, list:flatten(['\t', title, ': ' ,colors:wrap('rose', 'Unhandled error: '), core:cast(type_atom, 'string'), '\n', '\t\t', message, '\n'])]
      end
      [title, $condition_failure, message] ->
        io:print_strings([colors:wrap('amber', 'x')])
        return [$failed, list:flatten(['\t', title, ': ' ,colors:wrap('rose', 'Test failed: '), message, '\n'])]
      end
      [title, $equality_failure, message, expected, actual] ->
        io:print_strings([colors:wrap('amber', 'x')])
        return [$errored, list:flatten(['\t', title, ': ' ,colors:wrap('rose', 'Test failed: '), message, '\n', '\t\tExpected: ', core:cast(expected, 'string'), '\n\t\tActual:   ', core:cast(actual, 'string'), '\n'])]
      end
    end
  end

  wait_for_compelteion = def (completed, failed, succeded, errors)
    if completed == test_count
      return [failed, succeded, errors]
    end
    res = core:listen(listener)
    match res
      $finished -> return @wait_for_compelteion(completed + 1, failed, succeded + 1, errors) end
      [$errored, message] -> return @wait_for_compelteion(completed + 1, failed + 1, succeded, [<<errors>>, message]) end
      [$failed, message] -> return @wait_for_compelteion(completed, failed + 1, succeded, [<<errors>>, message]) end
      $pass -> return @wait_for_compelteion(completed, failed, succeded, errors) end
      x ->
        return @wait_for_compelteion(completed + 1, failed + 1, succeded, errors)
      end
    end
  end

  [failed, succeded, errors] = @wait_for_compelteion(0, 0, 0, [])
  io:print_string('\n')
  if failed > 0
    io:print_strings([list:flatten(errors), colors:wrap('amber', '\tCompleted: '), core:cast(succeded, 'string'), ' passed , ', core:cast(failed, 'string'), ' failed\n'])
    return false
  end
  io:print_strings([colors:wrap('green', '\tCompleted: '), core:cast(succeded, 'string'), ' passed , ', core:cast(failed, 'string'), ' failed\n'])
  return true
end
