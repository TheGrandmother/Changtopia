module main

def core_modules()
  return [
    'io',
    'shell',
    'list',
    'utils',
    'colors',
    'fs',
    'set',
    'testing',
    'map'
  ]
end

def load_core_modules()
  load_modules = def (modules)
    match modules
      [module_name, <<rest>>] ->
        match core:request(core:io_pid(), $load_module, module_name)
          $module_not_found ->
            return [$module_not_found, module_name]
          end
          $module_loaded ->
            return @load_modules(rest)
          end
        end
      end
      [] -> return $ok end
    end
  end
  return @load_modules(core_modules())
end

def _entry()

  core:send(core:io_pid(), $print_string, 'Loading Core Modules...')
  match load_core_modules()
    [$module_not_found, module_name] ->
      core:send(core:io_pid(), $print_strings, ['FAILURE\n'])
      core:send(core:io_pid(), $print_strings, ['Failed to load the core module: ', module_name, '\n'])
      core:send(core:io_pid(), $print_strings, ['Unable to start changtopia.\n'])
    end
    $ok ->
      core:send(core:io_pid(), $print_string, 'Ok\n')
    end
  end

  -- Run applicable tests
  list:_test()
  map:_test()

  shell_pid = core:spawn(['shell', '_entry'], core:my_pid())
  core:listen(['main', 'listener'])
end

def listener(sender, payload)
  match payload
    [$error, error_atom, msg, verbose] ->
      io:print_strings([
        'There was an unrecoverable error in the shell:\n',
        verbose,
        '\nPress any key to restart changtopia and hope for the best'
      ])
      core:send(core:io_pid(), $get_input_stream)
      core:listen(['main', 'quit_listener'])
      return $error
    end
  end
  core:listen(['main', 'listener'])
end

def quit_listener(sender, payload)
  core:send(core:io_pid(), $shut_down)
end
