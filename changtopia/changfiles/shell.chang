module shell
-- Lets try to write the basics for a shell like thing!

def load_module(arg)
  match arg
    [name] ->
      match core:request(core:io_pid(), $load_module, name)
        $module_not_found ->
          io:print_strings(['Could not find module: ', name, '\n'])
          return $fail
        end
        $already_loaded ->
          io:print_strings([name, ' has already been loaded \n'])
          return $ok
        end
        whatever ->
          io:print_strings(['Loaded module: ', name, '\n'])
          return $ok
        end
      end
    end
    [] ->
      io:print_string('No module name provided\n')
      return $fail
    end
    whatever ->
      io:print_string('Load only takes the name of the module as an argument\n')
      return $fail
    end
  end
  return $ok
end

def run_module(arg)
  match arg
    [name, <<args>>] ->
      return spawn_module(name, args)
    end
    [] ->
      io:print_string('No module name provided\n')
      return $fail
    end
    whatever ->
      io:print_string('Run only takes the name of the module as an argument\n')
      return $fail
    end
  end
  return $ok
end

def help(_)
  io:print_string('This is what you can do, which ain\'t much, and that which you should be able to do is probably broken.\n')
  return _help(commands())
end

def _help(commands)
  match commands
    [] ->
      return $ok
    end
    [entry, <<rest>>] ->
      [name, arg_count, _, help_text] = entry
      io:print_strings(['  ', name, ': ', help_text, '\n'])
      return _help(rest)
    end
  end
  return $ok
end

def spawn_module(name, args)
  pid = core:spawn(['shell', '_spawn_module'], name, args)
  core:link(pid)
  response = core:request(pid, $run)
  match response
    [[$error, error_atom, msg, trace]] ->
      io:print_string(core:ansi_cursor_to(0,0))
      io:print_string(core:ansi_clear_screen())
      io:print_strings(['Error running: ', name, '\n', msg, ' (', error_atom,')', '\n', trace])
      return $error
    end
    $ok ->
      return $ok
    end
    $no_return ->
      return $ok
    end
    whatever ->
      io:print_strings([name, ' Sent us some strange shit...\n The strangeness is in the debug log\n'])
      io:debug_raw(response)
      return $ok
    end
  end
  core:unlink(pid)
  return $ok
end

def _spawn_module(name, args)
  result = core:listen(['shell', '_spawn_listener'], name, args)
  return result
end

def _spawn_listener(name, args, sender, payload)
  match payload
    $run ->
      result = core:run([name, '_entry'], args)
      return result
    end
    whatever ->
      return $unknown_message
    end
  end
  return $ok
end

def quit(_)
  io:print_string('Thanks for nothing... cya l8r\n')
  core:send(core:io_pid(), $shut_down)
  return $ok
end

def run_command(input)
  [name, <<arguments>>] = input
  match find_command(name)
    $not_found ->
      io:print_strings(['What is even "', name, '"?\n'])
      return $ok
    end
    [_, arg_count, thing, __] ->
      [module_name, function] = thing
      if core:send(core:io_pid(), $has_module, module_name) == false
        match utils:load_module(module_name)
          $fail -> io:print_strings(['Failed to load module "', module_name, '" needed to run ', name, '\n']) end
        end
      end
      return core:run([module_name, function], arguments)
    end
  end
  return $ok
end

def load_and_run(arg)
  if load_module(arg) == $ok
    return run_module(arg)
  end
  return $fail
end

def commands()
  -- Commands ar an array on the form:
  -- name, noArgs, [module, function], help_text
  bob = [
    ['q', 0, ['shell', 'quit'], 'Quits the VM'],
    ['run', 1, ['shell', 'run_module'], 'Runs the specified module'],
    ['load', 1, ['shell', 'load_module'], 'Loads the specified module'],
    ['lar', 1, ['shell', 'load_and_run'], 'Load and run a module'],
    ['help', 0, ['shell', 'help'], 'Prints this.. duh'],
    ['chat', 0, ['chat', '_entry'], 'Chat with other people on changtopia, I.e, nobody'],
    ['clear', 0, ['shell', 'clear'], 'Clears the screen'],
    ['changpile', 0, ['changpiler', '_entry'], 'Changpile some code. run "changpile help" for additional info'],
    ['web', 0, ['bowsette', '_entry'], 'Literally surf the changtopia web.'],
    ['fs', 0, ['fs', '_entry'], 'Do filey stuff. Type "fs help" to be more confused'],
  ]
  return bob
end

def clear(_)
  io:print_strings([core:ansi_clear_terminal()])
  return $ok
end

def find_command(name)
  bob = commands()
  return _find_command(name, bob)
end

def _find_command(name, commands)
  match commands
    [] ->
      return $not_found
    end
    [command, <<rest>>] ->
      [command_name, <<_>>] = command
      if name == command_name
        return command
      end
      return _find_command(name, rest)
    end
  end
  return $ok
end

def prompt()
  input_string = io:get_line()
  io:print_string('\n')
  match run_command(list:split_by(input_string, " "))
    $quit ->
      return $quit
    end
    whatever ->
      return prompt()
    end
  end
  return $ok
end

def _entry(main_pid)
  core:link(main_pid)
  io:print_string('Starting shell\n')
  utils:load_module('splash_screen')
  splash_screen:splash()
  prompt()
end
