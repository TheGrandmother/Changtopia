module colors

-- The only good thing about this whole shindig is the color theme
-- qualia by this dude: https://github.com/isaacwhanson

-- ! black/dark-gray
-- *.color0:       #101010
-- *.color8:       #454545
-- ! red/orange
-- *.color1:       #EFA6A2
-- *.color9:       #E0AF85
-- ! green/aquamarine
-- *.color2:       #80C990
-- *.color10:      #5ACCAF
-- ! amber/yellow
-- *.color3:       #A69460
-- *.color11:      #C8C874
-- ! blue/violet
-- *.color4:       #A3B8EF
-- *.color12:      #CCACED
-- ! magenta/rose
-- *.color5:       #E6A3DC
-- *.color13:      #F2A1C2
-- ! cyan/azure
-- *.color6:       #50CACD
-- *.color14:      #74C3E4
-- ! gray/white
-- *.color7:       #808080
-- *.color15:      #C0C0C0

def _get_color_by_number(isBg, number)
  color_fn = ['core', 'ansi_color_hex']
  if isBg
    color_fn = ['core', 'ansi_bg_color_hex']
  end
  match number
    0  -> return @color_fn('101010') end
    1  -> return @color_fn('EFA6A2') end
    2  -> return @color_fn('80C990') end
    3  -> return @color_fn('A69460') end
    4  -> return @color_fn('A3B8EF') end
    5  -> return @color_fn('E6A3DC') end
    6  -> return @color_fn('50CACD') end
    7  -> return @color_fn('808080') end
    8  -> return @color_fn('454545') end
    9  -> return @color_fn('E0AF85') end
    10 -> return @color_fn('5ACCAF') end
    11 -> return @color_fn('C8C874') end
    12 -> return @color_fn('CCACED') end
    13 -> return @color_fn('F2A1C2') end
    14 -> return @color_fn('74C3E4') end
    15 -> return @color_fn('C0C0C0') end
    x  -> return @color_fn('FFFFFF') end
  end
end

def _get_color_by_name(isBg, name)
  match name
    'black'      -> return _get_color_by_number(isBg, 0) end
    'red'        -> return _get_color_by_number(isBg, 1) end
    'green'      -> return _get_color_by_number(isBg, 2) end
    'amber'      -> return _get_color_by_number(isBg, 3) end
    'blue'       -> return _get_color_by_number(isBg, 4) end
    'magenta'    -> return _get_color_by_number(isBg, 5) end
    'cyan'       -> return _get_color_by_number(isBg, 6) end
    'gray'       -> return _get_color_by_number(isBg, 7) end
    'dark-grey'  -> return _get_color_by_number(isBg, 8) end
    'orange'     -> return _get_color_by_number(isBg, 9) end
    'aquamarine' -> return _get_color_by_number(isBg, 10) end
    'yellow'     -> return _get_color_by_number(isBg, 11) end
    'violet'     -> return _get_color_by_number(isBg, 12) end
    'rose'       -> return _get_color_by_number(isBg, 13) end
    'azure'      -> return _get_color_by_number(isBg, 14) end
    'white'      -> return _get_color_by_number(isBg, 15) end
    x            -> return _get_color_by_number(isBg, 16) end
  end
end

def get_color(thing)
  match core:cast(thing, 'integer')
    $nan ->
      return _get_color_by_name(false, thing)
    end
    x ->
      return _get_color_by_number(false, thing)
    end
  end
end

def get_bg_color(thing)
  match core:cast(thing, 'integer')
    $nan ->
      return _get_color_by_name(true, thing)
    end
    x ->
      return _get_color_by_number(true, thing)
    end
  end
end

def close_color()
  return core:ansi_color_reset()
end

def close_bg_color()
  return core:ansi_bg_color_reset()
end

def _make_test_row(n, acc)
  if n <= 15
    return _make_test_row(n + 1, [<<acc>>, <<get_color(n)>>, "■", "■", <<close_color()>>])
  end
  return [<<acc>>, <<get_color(n)>>, " ", " ", <<close_color()>>]
end

def _make_test_column(n, acc)
  if n <= 15
    return _make_test_column(n + 1, [<<acc>>, <<get_bg_color(n)>>, <<_make_test_row(0, [])>>, <<close_bg_color()>>, <<core:cast(n, 'string')>>, "\n"])
  end
  return acc
end

def _entry(_)
  derp = _make_test_column(0, [])
  io:print_string(derp)
end
