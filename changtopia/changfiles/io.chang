module io

def erase()
  print_string(bif:ansi_cursor_move(-1,0))
  bif:send(bif:io_pid(), $print_string, ' ')
  print_string(bif:ansi_cursor_move(-1,0))
  return 0
end

def build_input(input_string, input)
  match input
    13 ->
      return [$done, input_string]
    end
    127 ->
      match input_string
        [s, <<head>>, _] ->
          erase()
          return [s, <<head>>]
        end
        [s, _] ->
          erase()
          return [s]
        end
        [_] ->
          erase()
          return []
        end
        [] ->
          return []
        end
      end
    end
    whatever ->
      bif:send(bif:io_pid(), $print_string, [input])
      return [<<input_string>>, input]
    end
  end
  return $whatever
end

def _get_line(input_string, sender, payload)
  match utils:pid_compare(sender, bif:io_pid())
    true ->
      match payload
        [$input_data, d] ->
          thing = build_input(input_string, d)
          match thing
            [$done, stuff] ->
              return stuff
            end
            whatever ->
              input_string = thing
            end
          end
        end
        whatever ->
          bif:send(bif:io_pid(), $print_string, 'Got some starnge shit')
          bif:send(bif:io_pid(), $print_raw, payload)
        end
      end
    end
    false ->
      bif:send(bif:io_pid(), $print_string, '>Got a message from someone completley different!?\n')
    end
  end
  return bif:listen(['io', '_get_line'], input_string)
end

def get_line()
  bif:send(bif:io_pid(), $get_input_stream)
  bif:send(bif:io_pid(), $print_string, '>')
  bif:send(bif:io_pid(), $print_string, bif:ansi_cursor_show())
  input = bif:listen(['io', '_get_line'], '')
  bif:send(bif:io_pid(), $release_input_stream)
  return input
end

def get_char()
  _get_char = def (sender, payload)
    match payload
      [$input_data, d] -> return d end
    end
  end
  bif:send(bif:io_pid(), $get_input_stream)
  input = bif:listen(_get_char)
  bif:send(bif:io_pid(), $release_input_stream)
  return input
end

def print_tabs(n)
  if n > 0
    bif:send(bif:io_pid(), $print_string, '  ')
    print_tabs(n)
  end
end

def _print_list(list)
  match list
    [] ->
      return $ok
    end
    [thing, <<rest>>] ->
      bif:send(bif:io_pid(), $print_string, '  ')
      bif:send(bif:io_pid(), $print_string, thing)
      bif:send(bif:io_pid(), $print_string, ',\n')
      return _print_list(rest)
    end
  end
end

def print_list(list)
  bif:send(bif:io_pid(), $print_string, '[\n')
  _print_list(list)
  bif:send(bif:io_pid(), $print_string, ']\n')
  return $ok
end

def print_strings(arr)
  bif:send(bif:io_pid(), $print_string, list:flatten(arr))
  return $ok
end

def print_string(str)
  bif:send(bif:io_pid(), $print_string, str)
  return $ok
end

def debug(str)
  bif:send(bif:io_pid(), $debug, str)
  return $ok
end

def raw_debug(payload)
  bif:send(bif:io_pid(), $raw_debug, payload)
  return $ok
end
