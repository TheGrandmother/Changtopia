module io

def erase()
  print_string(core:ansi_cursor_move(-1,0))
  core:send(core:io_pid(), $print_string, ' ')
  print_string(core:ansi_cursor_move(-1,0))
  return 0
end

def build_input(input_string, input)
  match input
    [$key_down, _, $enter, _] ->
      return [$done, input_string]
    end
    [$key_down, _, $numpad_enter, _] ->
      return [$done, input_string]
    end
    [$key_down, _, $backspace, _] ->
      match input_string
        [s, <<head>>, _] ->
          erase()
          return [s, <<head>>]
        end
        [s, _] ->
          erase()
          return [s]
        end
        [_] ->
          erase()
          return []
        end
        [] ->
          return []
        end
      end
    end
    [$key_down, d, _, true] ->
      core:send(core:io_pid(), $print_string, [d])
      return [<<input_string>>, d]
    end
    whatever -> return input_string end
  end
  return $whatever
end

def _get_line(input_string, sender, payload)
  match utils:pid_compare(sender, core:io_pid())
    true ->
      thing = build_input(input_string, payload)
      match thing
        [$done, stuff] ->
          return stuff
        end
        whatever ->
          input_string = thing
        end
      end
    end
    false ->
      core:send(core:io_pid(), $print_string, '>Got a message from someone completley different!?\n')
    end
  end
  return core:listen(['io', '_get_line'], input_string)
end

def get_line()
  core:send(core:io_pid(), $get_input_stream)
  core:send(core:io_pid(), $print_string, '>')
  core:send(core:io_pid(), $print_string, core:ansi_cursor_show())
  input = core:listen(['io', '_get_line'], '')
  core:send(core:io_pid(), $release_input_stream)
  return input
end

def get_char()
  _get_char = def (sender, payload)
    match payload
      [$key_down, d, _, true] -> return d end
      whatever -> return core:listen(_get_char) end
    end
  end
  core:send(core:io_pid(), $get_input_stream)
  input = core:listen(_get_char)
  core:send(core:io_pid(), $release_input_stream)
  return input
end

def get_key_down()
  _get_char = def (sender, payload)
    match payload
      [$key_down, d, _, true] -> return d end
      [$key_down, _, d, false] -> return d end
      whatever -> return core:listen(_get_char) end
    end
  end
  core:send(core:io_pid(), $get_input_stream)
  input = core:listen(_get_char)
  core:send(core:io_pid(), $release_input_stream)
  return input
end

def print_tabs(n)
  if n > 0
    core:send(core:io_pid(), $print_string, '  ')
    print_tabs(n)
  end
end

def _print_list(list)
  match list
    [] ->
      return $ok
    end
    [thing, <<rest>>] ->
      core:send(core:io_pid(), $print_string, '  ')
      core:send(core:io_pid(), $print_string, thing)
      core:send(core:io_pid(), $print_string, ',\n')
      return _print_list(rest)
    end
  end
end

def print_list(list)
  core:send(core:io_pid(), $print_string, '[\n')
  _print_list(list)
  core:send(core:io_pid(), $print_string, ']\n')
  return $ok
end

def print_strings(arr)
  core:send(core:io_pid(), $print_string, list:flatten(arr))
  return $ok
end

def print_string(str)
  core:send(core:io_pid(), $print_string, str)
  return $ok
end

def debug(str)
  core:send(core:io_pid(), $debug, str)
  return $ok
end

def debug_raw(payload)
  core:send(core:io_pid(), $raw_debug, payload)
  return $ok
end

-- def anything_to_string(x)
--   match x
--     [] -> return '[]' end
--     [x, <<anyhting>>] ->
--       if anything == []
--         return ["[", <<anything_to_string(x)>>, "]"]
--       end
--       return ["[", <<anything_to_string(x)>>, ",", <<anything_to_string(anything)>>, "]"]
--     end
--     x ->
--       return core:cast(x, 'string')
--     end
--   end
-- end
